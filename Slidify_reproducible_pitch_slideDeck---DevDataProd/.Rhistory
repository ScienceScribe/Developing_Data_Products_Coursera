3 + 42
print 'hi'
print('hi')
?as.character()
library(caret)
install.packages("caret")
library(caret)
install.packages("devtools")
library(devtools)
library(devtools)
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
?points
R.verstion.string
R.version.string
install.packages("swirl")
library(swirl)
1+1
exit()
bye
quit
q()
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y ~ x)
summary(fit)
fit$coefficients
confidt(fit)
confint(fit)
data(mtcars)
names(mtcars)
mtFit <- lm(mtcars$mpg ~ mtcars$wt)
predict(mtFit, data.frame(wt = mean(mtcars$wt)), interval = "prediction")
wt<- mean(mtcars$wt)
wt
wt <- data.frame(wt)
wt
predict(mtFit, newdata = wt, interval = "prediction")
names(mtcars)
mpg <- mtcars$mpg
wt <- mtcars$wt
mtFit <- lm(mpg ~ wt)
summary(mtFit)
meanWt <- mean(mtcars$wt)
meanWt_df <- data.frame(meanWt)
meanWt_df
predict(mtFit, newdata = meanWt_df, interval = "prediction")
meanWt_df$wt <- 3.21725
predict(mtFit, newdata = meanWt_df, interval = "prediction")
predict(mtFit, newdata = meanWt_df, interval = "confidence")
help(mtcars)
newCar <- data.frame()
newCar$wt <- 3
newCar
wt <- 3
newCar <- data.frame(wt)
newCar
predict(mtFit, newdata = newCar, interval = "prediction")
mtFit2 <- lm(mtcars$mpg ~ I(mtcars$wt * 2))
summary(mtFit2)
confint(mtCars2)
confint(mtFit2)
confint(mtFit)
mtFit3 <- lm(mtcars$mpg ~ I(mtcars$wt/2))
summary(mtFit3)
confint(mtFit3)
summary(mtFit3)
mtFit4 <- lm(mtcars$mpg ~ 1)
summary(mtFit4)
3.046**2/6.024**2
summary(mtFit)
?seq
pi
seq(0, 8*pi, length = 2-)
seq(0, 8*pi, length = 20)
25.132741/20
25.132741/19
?fft
library(swirl)
swirl()
bye()
q()
library(caret)
?matlines
library(ISLR)
install.packages("ISLR")
library(ISLR)
names(Wage)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
names(AlzheimerDisease)
names()
names(diagnosis)
names(predictors)
alz <- AlzheimerDisease
data()
names(diagnosis)
adData = data.frame(diagnosis, predictors)
names(adData)
data(concrete)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[inTrain,]
testing = mixtures[-inTrain,]
names(mixtures)
hist(mixtures$Superplasticizer)
hist(log(mixtures$Superplasticizer) )
hist(log(mixtures$Superplasticizer)+1 )
?hist
hist(log(mixtures$Superplasticizer)+1, breaks = 100 )
set.seed(3433)
names(diagnosis)
adData = data.frame(diagnosis, predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[inTrain,]
testing = adData[-inTrain,]
hist(train)
hist(training)
hist(training$IL-11)
str(training)
hist(training$IL_3)
hist(training$IL_4)
hist(training$IL_5)
ques3 <- preProcess(training[,58:69], method = "pca", )
?preProcess
ques3 <- preProcess(training[,58:69], method = "pca", thresh = .8)
summary(ques3)
ques3 <- preProcess(training[,58:69], method = "pca", thresh = 80)
summary(ques3)
ques3 <- preProcess(training[,58:69], method = "pca", pcaComp = 12)
summary(ques3)
ques3 <- preProcess(training[,58:69], method = "pca", pcaComp = 10)
summary(ques3)
ques3 <- preProcess(training[,58:69], method = "pca", pcaComp = 9)
summary(ques3)
ques3 <- preProcess(training[,58:69], method = "pca", pcaComp = 7)
summary(ques3)
ques3
PC <- predict(ques3, training[,58:69])
sd(PC)
dim(PC)
modelFit <- train(training$diagnosis ~., method = "glm", data = PC)
modelFit <- train(training$diagnosis ~ ., method = "glm", data = PC)
modelFit <- train(training$diagnosis ~ ., method = "lm", data = PC)
preProc <- preProcess(training[,58:69], method = "pca", pcaComp = 12)
trainPC <- predict(preProc, training[,58:69])
modelFit <- train(training$diagnosis ~ ., method = "glm", data = trainPC)
install.packages("e1071")
modelFit <- train(training$diagnosis ~ ., method = "glm", data = trainPC)
summary(modelFit)
modelFit
print(modelFit)
sd(training$diagnosis)
variance(training$diagnosis)
var(training$diagnosis)
sqrt(0.2)
.4*.4
testPC <- predict(preProc, test[,58:69])
testPC <- predict(preProc, testing[,58:69])
?confusionMatrix
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
preProc <- preProcess(training[,58:69], method = "pca", pcaComp = 10)
trainPC <- predict(preProc, training[,58:69])
modelFit <- train(training$type ~ ., method = "glm", data = trainPC)
modelFit <- train(training$diagnosis ~ ., method = "glm", data = trainPC)
testPC <- predict(preProc, testing[,58:69])
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
preProc <- preProcess(training[,58:69], method = "pca", pcaComp = 9)
trainPC <- predict(preProc, training[,58:69])
modelFit <- train(training$diagnosis ~ ., method = "glm", data = trainPC)
testPC <- predict(preProc, testing[,58:69])
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
preProc <- preProcess(training[,58:69], method = "pca", pcaComp = 7)
trainPC <- predict(preProc, training[,58:69])
modelFit <- train(training$diagnosis ~ ., method = "glm", data = trainPC)
testPC <- predict(preProc, testing[,58:69])
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
preProc <- preProcess(log10(training[,58:69], method = "pca", pcaComp = 12))
preProc <- preProcess(log10(training[,58:69] +1), method = "pca", pcaComp = 12))
preProc <- preProcess(log10(training[,58:69] +1), method = "pca", pcaComp = 12)
preProc <- preProcess(log10(training[,58:69]+1), method = "pca", pcaComp = 12)
preProc <- preProcess(training[,58:69]+1), method = "pca", pcaComp = 12)
preProc <- preProcess(training[,58:69], method = "pca", pcaComp = 12)
preProc <- preProcess(log10(training[,58:69]+1), method = "pca", pcaComp = 12)
?logBBB
?log10
preProc <- preProcess(log(training[,58:69]+1), method = "pca", pcaComp = 12)
summary(modelFit)
summary(modelFit)$sigma
modelFit$resid
preProc <- preProcess(training[,58:69], method = "pca", pcaComp=12)
trainPC <- predict(preProc, training[,58:69])
modelFit <- train(training$type ~., method = "glm", data = trainPC)
modelFit <- train(training$diagnosis ~., method = "glm", data = trainPC)
testPC <- predict(preProc, testing[,58:69])
confusionMatrix(testing$type, predict(modelFit, testPC))
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
summary(modelFit)
dim(trainPC)
var(training$diagnosis)
.5859**2
.5859^2
var(training$diagnosis)
sd(training$diagnosis)
preProc <- preProcess(training[,58:69], method = "pca", pcaComp=10)
trainPC <- predict(preProc, training[,58:69])
modelFit <- train(training$diagnosis ~., method = "glm", data = trainPC)
testPC <- predict(preProc, testing[,58:69])
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
confusionMatrix(training$diagnosis, modelFit)
confusionMatrix(training$diagnosis, predict(modelFit, trainingPC))
confusionMatrix(training$diagnosis, predict(modelFit, trainPC))
***************************
preProc <- preProcess(training[,58:69], method = "pca", pcaComp = 12)
trainPC <- predict(preProc, training[,58:69])
modelFit <- train(training$diagnosis ~., method = "glm", data = trainPC)
confusionMatrix(training$diagnosis, predict(modelFit, trainPC))
preProc <- preProcess(training[,58:69], method = "pca", pcaComp = 10)
trainPC <- predict(preProc, training[,58:69])
modelFit <- train(training$diagnosis ~., method = "glm", data = trainPC)
confusionMatrix(training$diagnosis, predict(modelFit, trainPC))
preProc <- preProcess(training[,58:69], method = "pca", pcaComp = 9)
trainPC <- predict(preProc, training[,58:69])
modelFit <- train(training$diagnosis ~., method = "glm", data = trainPC)
confusionMatrix(training$diagnosis, predict(modelFit, trainPC))
preProc <- preProcess(training[,58:69], method = "pca", pcaComp = 7)
trainPC <- predict(preProc, training[,58:69])
modelFit <- train(training$diagnosis ~., method = "glm", data = trainPC)
confusionMatrix(training$diagnosis, predict(modelFit, trainPC))
preProc <- preProcess(training[,58:69], method = "pca", thresh = 0.8)
trainPC <- predict(preProc, training[,58:69])
modelFit <- train(training$diagnosis ~., method = "glm", data = trainPC)
confusionMatrix(training$diagnosis, predict(modelFit, trainPC))
summary(modelFit)
?createDataPartition
inTrain[1:5]
exp <- createDataPartition(adData$diagnosis, p= 3/4)
exp[1:5]
set.seed(3433)
exp <- createDataPartition(adData$diagnosis, p = 3/4)[1]
exp[1:5]
set.seed(3433)
exp1 <- createDataPartition(adData$diagnosis, p = 3/4)
exp[1:5]
?list
train <- training[,c(1, 58:69)]
names(train)
preProc <- preProcess(training[,-1], method = "pca", thresh = 0.8)
preProc <- preProcess(train[,-1], method = "pca", thresh = 0.8)
modelFit1 <- train(train$diagnosis ~., method = "glm", data = train)
test <- testing[,c(1: 58:69)]
test <- testing[,c(1, 58:69)]
confusionMatrix(test$diagnosis, predict(modelFit1, test))
trainPC <- predict(preProc, train)
trainPC <- predict(preProc, train[,-1])
modelFit2 <- train(train$diagnosis ~., method = "glm", data = trainPC)
test <- predict(preProc, test[,-1])
confusionMatrix(test$diagnosis, predict(modelFit2, test))
test <- testing[,c(1, 58:69)]
testPC <- predict(preProc, test[,-1])
confusionMatrix(test$diagnosis, predict(modelFit2, testPC))
preProc <- preProcess(training[,58:69], method= "pca", thresh = 0.9)
summary(preProc)
train(PC) <- predict(preProc, training[,58:69])
trainPC <- predict(preProc, training[,58:69])
modelFit <- train(training$diagnosis ~., method = "glm", data = trainPC)
modelFit
summary(modelFit)
preProc <- preProcess(training[,58:69], method = "pca", thresh = 0.8)
trainPC <- predict(preProc, training[,58:69])
modelFit <- train(training$diagnosis, method = "glm", data = trainPC)
modelFit <- train(training$diagnosis ~., method = "glm", data = trainPC)
summary(modelFit)
train <- training[,c(1,58:69)]
test <- testing[,c(1,58:69)]
modelFit1 <- train(training$diagnosis ~ ., method = "glm", data = train)
confusionMatrix(testing$diagnosis, predict(modelFit1, test))
preProc <- preProcess(train[,-1], method = "pca", thresh = 0.8)
trainPC <- predict(preProc, training[,-1])
trainPC <- predict(preProc, train[,-1])
modelFit2 <- train(training$diagnosis ~., method = "glm", data = trainPC)
testPC <- predict(preProc, test[,-1])
confusionMatrix(test$diagnosis, predict(modelFit2, testPC))
31+28+31+30+31+30+31+31
243+24
243+19
243+17
243+14
243+8
?remove.packages
remove.packages("rattle")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
trainIndex <- createDataPartition(segmentationOriginal$Class, p = 0.7, list = FALSE)
set.seed(125)
trainIndex <- createDataPartition(segmentationOriginal$Class, p = 0.7, list = FALSE)
trainSet <- [trainIndex,]
trainSet <- segmentationOriginal[trainIndex,]
testSet <- segmentationOriginal[-trainIndex,]
set.seed(125)
modelFit1 <- train(Class ~., data = trainSet, method = "rpart")
modelFit1$finalModel
?train
trainIndex2 <- createDataPartition(segmentationOriginal$Case, p = 0.7, list = FALSE)
trainSet2 <- segmentationOriginal[trainIndex2,]
testSet2 <- segmentationOriginal[-trainIndex2,]
head(trainSet2)
trainSet <- segmentationOriginal[segmentationCase$Case == "train",]
trainSet <- segmentationOriginal[segmentationOriginal$Case == "train",]
head(trainSet)
trainSet <- segmentationOriginal[segmentationOriginal$Case == "Train",]
head(trainSet)
table(trainSet$Case, exclude = NULL)
testSet <- segmentationOriginal[segmentationOriginal$Case == "Test",]
head(testSet)
table(segmentationOriginal$Case, exclude = NULL)
table(testSet$Case, exclude = NULL)
set.seed(125)
modelFit1 <- train(Class ~., data = trainSet, method = "rf")
modelFit1 <- train(Class ~., data = trainSet, method = "rpart")
modelFit1$finalModel
library(pgmm)
data(olive)
olive = olive[,-1]
library(tree)
?tree
modelFit3 <- tree(Area ~., data = olive)
?predict.tree
newdata = as.data.frame(t(colMeans(olive)))
head(newdata)
newdata
predict.tree(modelFit3, newdata[,-1])
predict(modelFit3, newdata[,-1])
modelFit3
#############################################
#question 4
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train <- sample(1:dim(SAheart)[1], size = dim(SAheart)[1]/2, replace = F)
trainSA <- SAheart[train,]
testSA <- SAheart[-train,]
set.seed(13234)
head(trainSA)
modelFit4 <- train(chd ~ ., data = trainSA[,c(10,9,8,7,2,6,3)], method = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
predictTrain <- predict(modelFit4, trainSA)
missClass(trainSA$chd, predictTrain)
predictTest <- predict(modelFit4, testSA)
missClass(testSA$chd, predictTest[,-10])
predictTest <- predict(modelFit4, testSA[,-10])
missClass(testSA$chd, predictTest)
################################################
#question 5
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modelFit5 <- train(y ~., data = vowel.train, method = "rf")
?varImp
varImp(modelFit5)
0.9/12
1.5/15
15*0.075
8.1/12
.675*15
11.25-10.1
1.5-1.15
15-10.1
8.1/12
.675*15
15-10.125
6/9
3/9
.3333*40
library(swirl)
swirl()
setwd("C:/Users/Public/__a-DevDataProd---Coursera/Course_Project---DevDataProd/Slidify_slideDeck---DevDataProd")
library(slidify)
library(slidifyLibraries)
?publish
publish_rpubs("WLAGG", html_file = "index.html")
find.package("RCurl")
?.libPaths
.libPaths("C:/Users/CL/Documents/R/win-library/3.2/")
find.package("RCurl")
###try out .Library command
.Library
###try out .Library.site command
.Library.site
publish_rpubs("WLAGG", html_file = "index.html")
.libPaths("C:/Users/CL/Documents/R/win-library/3.2")
publish_rpubs("WLAGG", html_file = "index.html")
?curlOptions
library(RCurl)
publish_rpubs("WLAGG", html_file = "index.html")
?publish_rpubs
publish_rpubs("World Landmass Area Guessing Game", html_file = "index.html")
?curlOptions
listCurlOptions
slidify("index.Rmd")
slidify("index.Rmd")
publish_rpubs("World Landmass Area Guessing Game", html_file = "index.html")
publish_rpubs("Slidify_slideDeck---DevDataProd", html_file = "index.html")
library(markdown)
rpubsUpload(title = "World Landmass Area Guessing Game", htmlFile = "index.html", id = NULL, properties = list(), method = getOption("rpubs.upload.method", "internal"))
?rpubsUpload
?options
getOption("rpubs.upload.method")
options(rpubs.upload.method = "internal")
rpubsUpload(title = "World Landmass Area Guessing Game", htmlFile = "index.html", id = NULL, properties = list(), method = getOption("rpubs.upload.method", "internal"))
?publish
publish ("index.html", host= "rpubs")
publish ("index.html", host= "rpubs")
