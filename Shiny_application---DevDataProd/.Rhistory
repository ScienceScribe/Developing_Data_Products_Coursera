summary(ques3)
ques3 <- preProcess(training[,58:69], method = "pca", pcaComp = 7)
summary(ques3)
ques3
PC <- predict(ques3, training[,58:69])
sd(PC)
dim(PC)
modelFit <- train(training$diagnosis ~., method = "glm", data = PC)
modelFit <- train(training$diagnosis ~ ., method = "glm", data = PC)
modelFit <- train(training$diagnosis ~ ., method = "lm", data = PC)
preProc <- preProcess(training[,58:69], method = "pca", pcaComp = 12)
trainPC <- predict(preProc, training[,58:69])
modelFit <- train(training$diagnosis ~ ., method = "glm", data = trainPC)
install.packages("e1071")
modelFit <- train(training$diagnosis ~ ., method = "glm", data = trainPC)
summary(modelFit)
modelFit
print(modelFit)
sd(training$diagnosis)
variance(training$diagnosis)
var(training$diagnosis)
sqrt(0.2)
.4*.4
testPC <- predict(preProc, test[,58:69])
testPC <- predict(preProc, testing[,58:69])
?confusionMatrix
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
preProc <- preProcess(training[,58:69], method = "pca", pcaComp = 10)
trainPC <- predict(preProc, training[,58:69])
modelFit <- train(training$type ~ ., method = "glm", data = trainPC)
modelFit <- train(training$diagnosis ~ ., method = "glm", data = trainPC)
testPC <- predict(preProc, testing[,58:69])
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
preProc <- preProcess(training[,58:69], method = "pca", pcaComp = 9)
trainPC <- predict(preProc, training[,58:69])
modelFit <- train(training$diagnosis ~ ., method = "glm", data = trainPC)
testPC <- predict(preProc, testing[,58:69])
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
preProc <- preProcess(training[,58:69], method = "pca", pcaComp = 7)
trainPC <- predict(preProc, training[,58:69])
modelFit <- train(training$diagnosis ~ ., method = "glm", data = trainPC)
testPC <- predict(preProc, testing[,58:69])
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
preProc <- preProcess(log10(training[,58:69], method = "pca", pcaComp = 12))
preProc <- preProcess(log10(training[,58:69] +1), method = "pca", pcaComp = 12))
preProc <- preProcess(log10(training[,58:69] +1), method = "pca", pcaComp = 12)
preProc <- preProcess(log10(training[,58:69]+1), method = "pca", pcaComp = 12)
preProc <- preProcess(training[,58:69]+1), method = "pca", pcaComp = 12)
preProc <- preProcess(training[,58:69], method = "pca", pcaComp = 12)
preProc <- preProcess(log10(training[,58:69]+1), method = "pca", pcaComp = 12)
?logBBB
?log10
preProc <- preProcess(log(training[,58:69]+1), method = "pca", pcaComp = 12)
summary(modelFit)
summary(modelFit)$sigma
modelFit$resid
preProc <- preProcess(training[,58:69], method = "pca", pcaComp=12)
trainPC <- predict(preProc, training[,58:69])
modelFit <- train(training$type ~., method = "glm", data = trainPC)
modelFit <- train(training$diagnosis ~., method = "glm", data = trainPC)
testPC <- predict(preProc, testing[,58:69])
confusionMatrix(testing$type, predict(modelFit, testPC))
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
summary(modelFit)
dim(trainPC)
var(training$diagnosis)
.5859**2
.5859^2
var(training$diagnosis)
sd(training$diagnosis)
preProc <- preProcess(training[,58:69], method = "pca", pcaComp=10)
trainPC <- predict(preProc, training[,58:69])
modelFit <- train(training$diagnosis ~., method = "glm", data = trainPC)
testPC <- predict(preProc, testing[,58:69])
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
confusionMatrix(training$diagnosis, modelFit)
confusionMatrix(training$diagnosis, predict(modelFit, trainingPC))
confusionMatrix(training$diagnosis, predict(modelFit, trainPC))
***************************
preProc <- preProcess(training[,58:69], method = "pca", pcaComp = 12)
trainPC <- predict(preProc, training[,58:69])
modelFit <- train(training$diagnosis ~., method = "glm", data = trainPC)
confusionMatrix(training$diagnosis, predict(modelFit, trainPC))
preProc <- preProcess(training[,58:69], method = "pca", pcaComp = 10)
trainPC <- predict(preProc, training[,58:69])
modelFit <- train(training$diagnosis ~., method = "glm", data = trainPC)
confusionMatrix(training$diagnosis, predict(modelFit, trainPC))
preProc <- preProcess(training[,58:69], method = "pca", pcaComp = 9)
trainPC <- predict(preProc, training[,58:69])
modelFit <- train(training$diagnosis ~., method = "glm", data = trainPC)
confusionMatrix(training$diagnosis, predict(modelFit, trainPC))
preProc <- preProcess(training[,58:69], method = "pca", pcaComp = 7)
trainPC <- predict(preProc, training[,58:69])
modelFit <- train(training$diagnosis ~., method = "glm", data = trainPC)
confusionMatrix(training$diagnosis, predict(modelFit, trainPC))
preProc <- preProcess(training[,58:69], method = "pca", thresh = 0.8)
trainPC <- predict(preProc, training[,58:69])
modelFit <- train(training$diagnosis ~., method = "glm", data = trainPC)
confusionMatrix(training$diagnosis, predict(modelFit, trainPC))
summary(modelFit)
?createDataPartition
inTrain[1:5]
exp <- createDataPartition(adData$diagnosis, p= 3/4)
exp[1:5]
set.seed(3433)
exp <- createDataPartition(adData$diagnosis, p = 3/4)[1]
exp[1:5]
set.seed(3433)
exp1 <- createDataPartition(adData$diagnosis, p = 3/4)
exp[1:5]
?list
train <- training[,c(1, 58:69)]
names(train)
preProc <- preProcess(training[,-1], method = "pca", thresh = 0.8)
preProc <- preProcess(train[,-1], method = "pca", thresh = 0.8)
modelFit1 <- train(train$diagnosis ~., method = "glm", data = train)
test <- testing[,c(1: 58:69)]
test <- testing[,c(1, 58:69)]
confusionMatrix(test$diagnosis, predict(modelFit1, test))
trainPC <- predict(preProc, train)
trainPC <- predict(preProc, train[,-1])
modelFit2 <- train(train$diagnosis ~., method = "glm", data = trainPC)
test <- predict(preProc, test[,-1])
confusionMatrix(test$diagnosis, predict(modelFit2, test))
test <- testing[,c(1, 58:69)]
testPC <- predict(preProc, test[,-1])
confusionMatrix(test$diagnosis, predict(modelFit2, testPC))
preProc <- preProcess(training[,58:69], method= "pca", thresh = 0.9)
summary(preProc)
train(PC) <- predict(preProc, training[,58:69])
trainPC <- predict(preProc, training[,58:69])
modelFit <- train(training$diagnosis ~., method = "glm", data = trainPC)
modelFit
summary(modelFit)
preProc <- preProcess(training[,58:69], method = "pca", thresh = 0.8)
trainPC <- predict(preProc, training[,58:69])
modelFit <- train(training$diagnosis, method = "glm", data = trainPC)
modelFit <- train(training$diagnosis ~., method = "glm", data = trainPC)
summary(modelFit)
train <- training[,c(1,58:69)]
test <- testing[,c(1,58:69)]
modelFit1 <- train(training$diagnosis ~ ., method = "glm", data = train)
confusionMatrix(testing$diagnosis, predict(modelFit1, test))
preProc <- preProcess(train[,-1], method = "pca", thresh = 0.8)
trainPC <- predict(preProc, training[,-1])
trainPC <- predict(preProc, train[,-1])
modelFit2 <- train(training$diagnosis ~., method = "glm", data = trainPC)
testPC <- predict(preProc, test[,-1])
confusionMatrix(test$diagnosis, predict(modelFit2, testPC))
31+28+31+30+31+30+31+31
243+24
243+19
243+17
243+14
243+8
?remove.packages
remove.packages("rattle")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
trainIndex <- createDataPartition(segmentationOriginal$Class, p = 0.7, list = FALSE)
set.seed(125)
trainIndex <- createDataPartition(segmentationOriginal$Class, p = 0.7, list = FALSE)
trainSet <- [trainIndex,]
trainSet <- segmentationOriginal[trainIndex,]
testSet <- segmentationOriginal[-trainIndex,]
set.seed(125)
modelFit1 <- train(Class ~., data = trainSet, method = "rpart")
modelFit1$finalModel
?train
trainIndex2 <- createDataPartition(segmentationOriginal$Case, p = 0.7, list = FALSE)
trainSet2 <- segmentationOriginal[trainIndex2,]
testSet2 <- segmentationOriginal[-trainIndex2,]
head(trainSet2)
trainSet <- segmentationOriginal[segmentationCase$Case == "train",]
trainSet <- segmentationOriginal[segmentationOriginal$Case == "train",]
head(trainSet)
trainSet <- segmentationOriginal[segmentationOriginal$Case == "Train",]
head(trainSet)
table(trainSet$Case, exclude = NULL)
testSet <- segmentationOriginal[segmentationOriginal$Case == "Test",]
head(testSet)
table(segmentationOriginal$Case, exclude = NULL)
table(testSet$Case, exclude = NULL)
set.seed(125)
modelFit1 <- train(Class ~., data = trainSet, method = "rf")
modelFit1 <- train(Class ~., data = trainSet, method = "rpart")
modelFit1$finalModel
library(pgmm)
data(olive)
olive = olive[,-1]
library(tree)
?tree
modelFit3 <- tree(Area ~., data = olive)
?predict.tree
newdata = as.data.frame(t(colMeans(olive)))
head(newdata)
newdata
predict.tree(modelFit3, newdata[,-1])
predict(modelFit3, newdata[,-1])
modelFit3
#############################################
#question 4
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train <- sample(1:dim(SAheart)[1], size = dim(SAheart)[1]/2, replace = F)
trainSA <- SAheart[train,]
testSA <- SAheart[-train,]
set.seed(13234)
head(trainSA)
modelFit4 <- train(chd ~ ., data = trainSA[,c(10,9,8,7,2,6,3)], method = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
predictTrain <- predict(modelFit4, trainSA)
missClass(trainSA$chd, predictTrain)
predictTest <- predict(modelFit4, testSA)
missClass(testSA$chd, predictTest[,-10])
predictTest <- predict(modelFit4, testSA[,-10])
missClass(testSA$chd, predictTest)
################################################
#question 5
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modelFit5 <- train(y ~., data = vowel.train, method = "rf")
?varImp
varImp(modelFit5)
0.9/12
1.5/15
15*0.075
8.1/12
.675*15
11.25-10.1
1.5-1.15
15-10.1
require(datasets)
data(swiss)
require(GGally)
require(ggplot2)
g = ggpairs(swiss, lower = list(continuous = "smooth"), params = c(method = "loess"))
g
summary(lm(Fertility ~., data = swiss))
summary(lm(Fertility ~., data = swiss))$coefficients
lm(Fertility ~., data = swiss)
head(swiss)
summary(lm(Fertility ~ Agriculture, data = swiss))$coefficients
?relevel
head(mtcars)
fit <- lm(mpg ~ as.factor(cyl) + wt)
fit <- lm(mpg ~ as.factor(cyl) + wt, data = mtcars)
summary(fit)
fitNoWT <- lm(mpg ~ as.factor(cyl), data = mtcars)
summary(fitNoWT)
fitWithWT <- lm(mpg ~ as.factor(cyl) + wt, data = mtcars)
fitWTInt <- lm(mpg ~ as.factor(cyl) * wt, data = mtcars)
summary(fitWithWT)
summary(fitWTInt)
anova(fitWTInt, fitWithWT)
anova(fitWithWT, fitWTInt)
fit <- lm(mpg ~ as.factor(cyl), data = mtcars)
anova(fit, fitWithWT, fitWTInt)
fitQ4 <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fitQ4)
summary(fitWithWT)
?mtcars
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fitQ5 <- lm(y~x)
hatvalues(fitQ5)
dfbetas(fitQ5)
dfbetas(fitQ5)
##################################
#question 1
fit1 <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
summary(fit1)
##################################
#question 2
fit0 <- lm(mpg ~ factor(cyl, data = mtcars))
fit0 <- lm(mpg ~ factor(cyl), data = mtcars)
summary(fit0)
###################################
#question 3
fitInt <- lm(mpg ~ factor(cyl) * wt, data = mtcars)
anova(fit0, fit1, fitInt)
####################################
#question 4
fitQ4 <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fitQ4)
#######################################
#question 5
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fitQ5 <- lm(y ~ x)
dfbetas(fitQ5)
hatvalues(fitQ5)
########################################
#question 6
summary(lm(mpg~factor(cyl)+wt, data = mtcars))
summary(lm(mpg~factor(cyl), data = mtcars)
)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fitQ5 <- lm(y ~x)
hatvalues(fitQ5)
dfbetas(fitQ5)
6/7
1-6/7
6/7*15
15-6/7*15
?shuttle
library(MASS)
?shuttle
head(shuttle)
fit1 <- glm(use ~ wind, method = "binomial", data = shuttle)
fit1 <- glm(use ~ wind, family = "binomial", data = shuttle)
summary(fit1)
exp(fit1$coeff)
1/.986888
#########################################
#question 2
fit2 <- glm(use ~ wind + magn, method = "binomial", data = shuttle)
fit2 <- glm(use ~ wind + magn, family = "binomial", data = shuttle)
exp(fit2$coeff)
1/0.9684981
#######
#question 1 again
1/.9686888
?glm
#############################
#question 1 again
use <- shuttle$use
windFactor <- factor(shuttle$wind)
windFactor[1:5]
?relevel
windFactor <- relevel(shuttle$wind, tail)
windFactor <- relevel(shuttle$wind, "tail")
windFactor[1:5]
fit1 <- glm(use ~ windFactor, family = "binomial")
exp(fit1$coeff)
use[1:5]
use <- relevel(shuttle$use, noauto)
use <- relevel(shuttle$use, "noauto")
use[1:5]
fit1 <- glm(use ~ windFactor, family = "binomial")
exp(fit1$coeff)
#############################################
#question 2
fit2 <- glm(use ~ windFactor + shuttle$magn, family = "binomial")
exp(fit2$coeff)
############################################
#question 3
1/.7534247
############################################
#question 4
head(InsectSprays)
fit4 <- glm(factor(spray) ~ count, data = InsectSprays, family = "poisson")
table(InsectSprays$count)
InsectSprays$spray[1:5]
sprayReleveled <- relevel(InsectSprays$spray, "B")
fit4 <- glm(spray ~ count, data = InsectSprays, family = "poisson")
mode(InsectSprays$spray)
spray <- factor(InsectSprays$spray)
spray[1:5]
sprayReleveled <- relevel(spray, "B")
sprayReleveled[1:5]
fit4 <- glm(sprayReleveled ~ InsectSprays$count, family = "poisson")
summary(fit4)
mode(spray)
type(spray)
class(spray)
class(sprayReleveled)
table(sprayReleveled)
fit4 <- glm(InsectSprays$count ~ sprayReleveled, family = "poisson")
summary(fit4)
exp(fit4$coeff)
########################################
#question 5
log(10)
#######################################
#question 6
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x,y)
####
splineTerm <- (x > 0 * (x - 0))
cbind(1, x, splineTerm)
splineTerm <- (x > 0) * (x - 0))
splineTerm <- (x > 0) * (x - 0)
xMat <- cbind(1,x,splineTerm)
xMat
fit6 <- lm(y~xMat -1)
summary(fit6)
plot(x, fit4)
plot(x, predict(fit4, x))
plot(x, predict(fit4, xMat))
plot(x, predict(fit4, data.frame(xMat)))
plot(x, predict(fit4)
)
plot(x, predict(fit6))
predict(fit6)
y2 <- predict(fit6)[6:11]
y2
x2 <- x[6:11]
x2
lm(y2~x2)
2.03723 + (-1.02416)
y0 <- predict(fit6)[1:6]
x0 <- x[1:6]
x0
y0
lm(y0 ~ x0)
library(MASS)
mode(shuttle$use)
class(shuttle$use)
names(shuttle)
table(shuttle$use)
class(shuttle$wind)
shuttle$wind[1:5]
shuttle$use[1:5]
use <- relevel(shuttle$use, "noauto")
use[1:5]
wind <- relevel(shuttle$wind, "tail")
wind[1:5]
glm(use ~ wind, family = "binomial")
exp(glm(use ~ wind, family = "binomial")$coeff)
########################################
#question 2
exp(glm(use ~ wind + shuttle$magn, family = "binomial")$coeff)
#######################################
class(InsectSprays$spray)
InsectSpray$spray[1:5]
InsectSprays$spray[1:5]
spray <- relevel(InsectSprays$spray, "B")
mode(InsectSprays$spray)
mode(InsectSprays$count)
class(InsectSprays$count)
fit4 <- glm(InsectSprays$count ~ spray, family = "poisson")
summary(fit4)
fit4$finalModel
exp(fit4$coeff)
###########################################
#question 6
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x,y)
splineTerm <- (x > 0) * (x - 0)
xMatrix <- cbind(1, x, splineTerm)
xMatrix
fit6 <- lm(y ~ xMatrix -1)
line(x, predict(fit6, xMatrix))
line(x, predict(fit6))
?line
?lines
lines(x, predict(fit6))
summary(fit6)
2.03723-1.02416
############################### question 1
library(MASS)
names(shuttle)
use <- shuttle(use)
use <- shuttle$use
use[1:5]
useReleveled <- relevel(use, noauto)
use
useReleveled <- relevel(use, "noauto")
wind <- shuttle$wind
wind[1:5]
windReleveld <- relevel(wind, "tail")
windReleveld[1:5]
exp(glm(useReleveled ~ windReleveld)$coeff)
exp(glm(useReleveled ~ windReleveld, family = "binary")$coeff)
exp(glm(useReleveled ~ windReleveld, family = "binomial")$coeff)
################################## question 2
exp(glm(useReleveled ~ windReleveld + magn, family = "binomial")$coeff)
exp(glm(useReleveled ~ windReleveld + shuttle$magn, family = "binomial")$coeff)
################################# question 4
spray <- InsectSprays$spray
class(spray)
spray <- relevel(spray, "B")
head(InsectSprays)
exp(glm(InsectSprays$count ~ spray, family = "poisson")$coeff)
################################# question 6
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
splineTerm <- (x > 0) * (x - 0)
xMatrix <- cbind(1, x, splineTerm)
xMatrix
fit6 <- lm(y ~ xMatrix - 1)
summary(fit6)
2.03723-1.02416
6/9
6/9*40
40-26.7
13.3
2.1
13.3+2.1
setwd("C:/Users/Public/__a-DevDataProd---Coursera/DevDataProd_1sttry/Course_Project---DevDataProd/Shiny_app---DevDataProd")
runApp()
library(shiny)
runApp()
runApp()
runApp()
library(devtools)
deployApp()
?deployApp()
library(rsconnect)
deployApp()
